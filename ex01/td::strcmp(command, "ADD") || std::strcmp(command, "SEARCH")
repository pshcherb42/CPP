EXIT(1POSIX)                  POSIX Programmer's Manual                  EXIT(1POSIX)

PPRROOLLOOGG
       This  manual  page is part of the POSIX Programmer's Manual.  The Linux imple‐
       mentation of this interface may differ (consult the corresponding Linux manual
       page  for  details of Linux behavior), or the interface may not be implemented
       on Linux.

NNAAMMEE
       exit — cause the shell to exit

SSYYNNOOPPSSIISS
       exit [[_n]]

DDEESSCCRRIIPPTTIIOONN
       The _e_x_i_t utility shall cause the shell to exit from its current execution  en‐
       vironment  with  the  exit status specified by the unsigned decimal integer _n.
       If the current execution environment is  a  subshell  environment,  the  shell
       shall  exit  from  the subshell environment with the specified exit status and
       continue in the environment from which that subshell environment was  invoked;
       otherwise,  the  shell utility shall terminate with the specified exit status.
       If _n is specified, but its value is not between 0  and  255  inclusively,  the
       exit status is undefined.

       A  _t_r_a_p on EEXXIITT shall be executed before the shell terminates, except when the
       _e_x_i_t utility is invoked in that _t_r_a_p itself, in which  case  the  shell  shall
       exit immediately.

OOPPTTIIOONNSS
       None.

OOPPEERRAANNDDSS
       See the DESCRIPTION.

SSTTDDIINN
       Not used.

IINNPPUUTT FFIILLEESS
       None.

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       None.

AASSYYNNCCHHRROONNOOUUSS EEVVEENNTTSS
       Default.

SSTTDDOOUUTT
       Not used.

SSTTDDEERRRR
       The standard error shall be used only for diagnostic messages.

OOUUTTPPUUTT FFIILLEESS
       None.

EEXXTTEENNDDEEDD DDEESSCCRRIIPPTTIIOONN
       None.

EEXXIITT SSTTAATTUUSS
       The exit status shall be _n, if specified, except that the behavior is unspeci‐
       fied if _n is not an unsigned decimal integer or is greater  than  255.  Other‐
       wise,  the value shall be the exit value of the last command executed, or zero
       if no command was executed. When _e_x_i_t is executed in a _t_r_a_p action,  the  last
       command  is  considered  to be the command that executed immediately preceding
       the _t_r_a_p action.

CCOONNSSEEQQUUEENNCCEESS OOFF EERRRROORRSS
       Default.

       _T_h_e _f_o_l_l_o_w_i_n_g _s_e_c_t_i_o_n_s _a_r_e _i_n_f_o_r_m_a_t_i_v_e_.

AAPPPPLLIICCAATTIIOONN UUSSAAGGEE
       None.

EEXXAAMMPPLLEESS
       Exit with a _t_r_u_e value:

           exit 0

       Exit with a _f_a_l_s_e value:

           exit 1

       Propagate error handling from within a subshell:

           (
               command1 || exit 1
               command2 || exit 1
               exec command3
           ) > outputfile || exit 1
           echo "outputfile created successfully"

RRAATTIIOONNAALLEE
       As explained in other sections, certain exit status values have been  reserved
       for special uses and should be used by applications only for those purposes:

        126    A file to be executed was found, but it was not an executable utility.

        127    A utility to be executed was not found.

       >128    A command was interrupted by a signal.

       The  behavior  of _e_x_i_t when given an invalid argument or unknown option is un‐
       specified, because of differing practices in the various historical  implemen‐
       tations.  A  value larger than 255 might be truncated by the shell, and be un‐
       available even to a parent process that uses _w_a_i_t_i_d() to  get  the  full  exit
       value.  It  is  recommended  that  implementations that detect any usage error
       should cause a non-zero exit status (or, if the shell is interactive  and  the
       error  does not cause the shell to abort, store a non-zero value in ""$$??""), but
       even this was not done historically in all shells.

FFUUTTUURREE DDIIRREECCTTIIOONNSS
       None.

SSEEEE AALLSSOO
       _S_e_c_t_i_o_n _2_._1_4, _S_p_e_c_i_a_l _B_u_i_l_t_-_I_n _U_t_i_l_i_t_i_e_s

CCOOPPYYRRIIGGHHTT
       Portions of this text are reprinted and reproduced  in  electronic  form  from
       IEEE  Std 1003.1-2017, Standard for Information Technology -- Portable Operat‐
       ing System Interface (POSIX), The Open Group Base Specifications Issue 7, 2018
       Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics En‐
       gineers, Inc and The Open Group.  In the event of any discrepancy between this
       version  and  the original IEEE and The Open Group Standard, the original IEEE
       and The Open Group Standard is the referee document. The original Standard can
       be obtained online at http://www.opengroup.org/unix/online.html .

       Any  typographical  or  formatting  errors  that  appear in this page are most
       likely to have been introduced during the conversion of the  source  files  to
       man  page  format.  To report such errors, see https://www.kernel.org/doc/man-
       pages/reporting_bugs.html .

IEEE/The Open Group                      2017                            EXIT(1POSIX)
